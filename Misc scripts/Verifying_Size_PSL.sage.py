

# This file was *autogenerated* from the file Verifying_Size_PSL.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_6 = Integer(6); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0)

# case 1, d = 1 
q = var('q')
r = q - _sage_const_1 
s = q + _sage_const_1  
t = q**_sage_const_2  + q + _sage_const_1 
tpp = (t-_sage_const_1 )/_sage_const_6 
rpp = r
centralizers = [q**_sage_const_3  * r**_sage_const_2  * s * t, q**_sage_const_3  * r, q**_sage_const_2 , q * r**_sage_const_2  * s, q * r, r**_sage_const_2 , r**_sage_const_2 , r*s, t]
num_classes = [_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,r - _sage_const_1 , r - _sage_const_1 , _sage_const_0 , tpp - rpp, _sage_const_3  * tpp - rpp - _sage_const_1 , _sage_const_2  * tpp]

total_elements = _sage_const_0 
for i in range(len(centralizers)):
    total_elements += num_classes[i] * centralizers[_sage_const_0 ] / centralizers[i]
print(total_elements.full_simplify())
print(centralizers[_sage_const_0 ].full_simplify())

# case 2, d = 3 
q = var('q')
r = q - _sage_const_1 
s = q + _sage_const_1  
t = q**_sage_const_2  + q + _sage_const_1 
rp = r/_sage_const_3  
tp = t/_sage_const_3 
sp = t/_sage_const_3 
rpp = rp 
tpp = (tp - _sage_const_1 )/_sage_const_6 


centralizers = [q**_sage_const_3  * rp * r * s * t, q**_sage_const_3  * rp, q**_sage_const_2 , q * rp * r * s, q * rp, r**_sage_const_2 , rp * r, rp * s, tp]
num_classes = [_sage_const_1 ,_sage_const_1 ,_sage_const_3 ,rp - _sage_const_1 , rp - _sage_const_1 , _sage_const_1 , tpp - rpp, _sage_const_3  * tpp - rpp, _sage_const_2  * tpp]
total_elements = _sage_const_0 
for i in range(len(centralizers)):
    total_elements += num_classes[i] * centralizers[_sage_const_0 ] / centralizers[i]
print(total_elements.full_simplify())
print(centralizers[_sage_const_0 ].full_simplify())

# Figuring out what the 

wikipedia_order_d_is_1 = q**((_sage_const_1 /_sage_const_2 )*_sage_const_3 *_sage_const_2 )/_sage_const_1  * (q**_sage_const_2  - _sage_const_1 ) * (q**_sage_const_3  - _sage_const_1 ) 

wikipedia_order_d_is_3 = q**((_sage_const_1 /_sage_const_2 )*_sage_const_3 *_sage_const_2 )/_sage_const_3  * (q**_sage_const_2  - _sage_const_1 ) * (q**_sage_const_3  - _sage_const_1 ) 
print(wikipedia_order_d_is_1.full_simplify())
print(wikipedia_order_d_is_3.full_simplify())

